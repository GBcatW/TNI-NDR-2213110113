import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

# ------------------------ üé® Page Config ------------------------
st.set_page_config(page_title="CPF Price Trend", page_icon="üìà", layout="wide")

# ------------------------ üìÅ Load Data ------------------------
df = pd.read_excel("CPF.xlsx", sheet_name="CPF", skiprows=1)

# ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
df.columns = df.columns.str.strip().str.replace(r"\s+", "", regex=True)
df.columns = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î",
              "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)", "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)",
              "SETIndex", "SET‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)"]

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢
thai_months = {
    "‡∏°.‡∏Ñ.": "01", "‡∏Å.‡∏û.": "02", "‡∏°‡∏µ.‡∏Ñ.": "03", "‡πÄ‡∏°.‡∏¢.": "04",
    "‡∏û.‡∏Ñ.": "05", "‡∏°‡∏¥.‡∏¢.": "06", "‡∏Å.‡∏Ñ.": "07", "‡∏™.‡∏Ñ.": "08",
    "‡∏Å.‡∏¢.": "09", "‡∏ï.‡∏Ñ.": "10", "‡∏û.‡∏¢.": "11", "‡∏ò.‡∏Ñ.": "12"
}

def convert_thai_date(thai_date_str):
    for th, num in thai_months.items():
        if th in thai_date_str:
            day, month_th, year_th = thai_date_str.replace(",", "").split()
            month = thai_months[month_th]
            year = int(year_th) - 543
            return f"{year}-{month}-{int(day):02d}"
    return None

df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].apply(convert_thai_date)
df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')
df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])
df = df.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")

# ------------------------ üéõÔ∏è Sidebar ------------------------
st.sidebar.title("üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

column_options = ["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                  "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)"]
selected_column = st.sidebar.selectbox("üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü", column_options)

degree = st.sidebar.slider("üéöÔ∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö Polynomial Regression", 1, 2, 1)
show_table = st.sidebar.checkbox("üìã ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value=False)

# ------------------------ üìä Filter Data ------------------------
filtered_df = df.copy()
X = filtered_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].map(pd.Timestamp.toordinal).values.reshape(-1, 1)
y = filtered_df[selected_column].values

# ------------------------ ü§ñ Train Model ------------------------
poly = PolynomialFeatures(degree=degree)
X_poly = poly.fit_transform(X)
model = LinearRegression()
model.fit(X_poly, y)
trend = model.predict(X_poly)

# ------------------------ üìà Plot ------------------------
st.title("üìà CPF Data Trend Viewer")
st.markdown(f"### üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• **{selected_column}** ‡∏î‡πâ‡∏ß‡∏¢ Polynomial Regression")

fig = go.Figure()
fig.add_trace(go.Scatter(x=filtered_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], y=y, mode="lines+markers",
                         name=selected_column, line=dict(color="royalblue")))
fig.add_trace(go.Scatter(x=filtered_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], y=trend, mode="lines",
                         name=f"‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (Deg {degree})", line=dict(color="red", dash="dash")))

fig.update_layout(
    title=f"{selected_column} Trend Over Time",
    xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
    yaxis_title=selected_column,
    template="plotly_white",
    legend_title="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
    width=1000, height=500
)

st.plotly_chart(fig, use_container_width=True)

# ------------------------ üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ------------------------
st.subheader(f"üìå ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á {selected_column}")
col1, col2, col3 = st.columns(3)
col1.metric("üéØ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{filtered_df[selected_column].mean():,.2f}")
col2.metric("‚¨ÜÔ∏è ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{filtered_df[selected_column].max():,.2f}")
col3.metric("‚¨áÔ∏è ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"{filtered_df[selected_column].min():,.2f}")

# ------------------------ üìã ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ------------------------
if show_table:
    st.markdown("### üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.dataframe(filtered_df[["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", selected_column]], use_container_width=True)

# ------------------------ üíæ Download ------------------------
@st.cache_data
def convert_df_to_csv(df):
    return df.to_csv(index=False).encode('utf-8-sig')

csv = convert_df_to_csv(filtered_df[["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", selected_column]])
st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV", csv, f"cpf_{selected_column}.csv", "text/csv")

# ------------------------ üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ ------------------------
st.markdown("---")
st.markdown("üí° **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Polynomial Regression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
